#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Configura√ß√£o do Banco de Dados Local
Sistema de armazenamento local sem depend√™ncia do Supabase
"""

import os
import logging
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.local_file_manager import local_file_manager
import json

logger = logging.getLogger(__name__)

class DatabaseManager:
    """Gerenciador de dados local sem Supabase"""
    
    def __init__(self):
        """Inicializa gerenciador com arquivos locais apenas"""
        self.local_files = local_file_manager
        
        logger.info("‚úÖ Database Manager inicializado com armazenamento local")
    
    def test_connection(self) -> bool:
        """Testa conex√£o com o sistema de arquivos local"""
        try:
            # Verifica se pode escrever no diret√≥rio
            test_file = os.path.join(self.local_files.base_dir, 'test_connection.txt')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro no teste de conex√£o local: {e}")
            return False
    
    def create_analysis(self, analysis_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Cria nova an√°lise em arquivos locais"""
        try:
            logger.info("üíæ Salvando an√°lise em arquivos locais...")
            local_result = self.local_files.save_analysis_locally(analysis_data)
            
            if not local_result['success']:
                logger.error(f"‚ùå Falha ao salvar localmente: {local_result.get('error')}")
                return None
            
            logger.info(f"‚úÖ An√°lise criada: {len(local_result['files'])} arquivos locais")
            
            # Retorna dados com ID local
            return {
                'id': local_result['analysis_id'],
                'local_only': True,
                'local_files': local_result,
                **analysis_data
            }
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar an√°lise: {str(e)}")
            return None
    
    def update_analysis(self, analysis_id: str, update_data: Dict[str, Any]) -> bool:
        """Atualiza an√°lise existente (n√£o implementado para arquivos locais)"""
        logger.warning("‚ö†Ô∏è Atualiza√ß√£o de an√°lise n√£o implementada para armazenamento local")
        return False
    
    def get_analysis(self, analysis_id: str) -> Optional[Dict[str, Any]]:
        """Busca an√°lise por ID nos arquivos locais"""
        try:
            # Busca nos arquivos de metadata
            analyses = self.local_files.list_local_analyses()
            
            for analysis in analyses:
                if analysis['analysis_id'] == analysis_id:
                    # Carrega an√°lise completa
                    complete_file = None
                    for root, dirs, files in os.walk(self.local_files.base_dir):
                        for file in files:
                            if analysis_id[:8] in file and file.endswith('_completa.json'):
                                complete_file = os.path.join(root, file)
                                break
                        if complete_file:
                            break
                    
                    if complete_file:
                        with open(complete_file, 'r', encoding='utf-8') as f:
                            return json.load(f)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao buscar an√°lise {analysis_id}: {e}")
            return None
    
    def list_analyses(self, limit: int = 50, offset: int = 0) -> List[Dict[str, Any]]:
        """Lista an√°lises locais com pagina√ß√£o"""
        try:
            analyses = self.local_files.list_local_analyses()
            
            # Aplica pagina√ß√£o
            start = offset
            end = offset + limit
            
            return analyses[start:end]
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar an√°lises: {e}")
            return []
    
    def delete_analysis(self, analysis_id: str) -> bool:
        """Remove an√°lise dos arquivos locais"""
        return self.local_files.delete_local_analysis(analysis_id)
    
    def get_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas do armazenamento local"""
        try:
            local_analyses = self.local_files.list_local_analyses()
            storage_stats = self.local_files.get_storage_stats()
            
            return {
                'total_analyses': len(local_analyses),
                'recent_analyses': len([a for a in local_analyses if a.get('created_at', '') > (datetime.now().isoformat()[:10])]),
                'storage_stats': storage_stats,
                'local_analyses': local_analyses[:10],  # √öltimas 10
                'storage_type': 'local_files_only'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {
                'total_analyses': 0,
                'recent_analyses': 0,
                'storage_stats': {},
                'local_analyses': [],
                'storage_type': 'local_files_only',
                'error': str(e)
            }
    
    def get_analysis_files(self, analysis_id: str) -> List[Dict[str, Any]]:
        """Busca arquivos de uma an√°lise"""
        return self.local_files.get_analysis_files(analysis_id)
    
    def list_local_analyses(self) -> List[Dict[str, Any]]:
        """Lista an√°lises salvas localmente"""
        return self.local_files.list_local_analyses()

# Inst√¢ncia global do gerenciador
db_manager = DatabaseManager()