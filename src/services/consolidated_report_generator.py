#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Consolidated Report Generator
Gerador de relat√≥rios consolidados ultra-robustos sem dados brutos
"""

import os
import json
import time
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path
import markdown
import html

logger = logging.getLogger(__name__)

class ConsolidatedReportGenerator:
    """Gerador de relat√≥rios consolidados ultra-completos"""
    
    def __init__(self):
        """Inicializa gerador de relat√≥rios"""
        self.reports_dir = Path("relatorios_consolidados")
        self.reports_dir.mkdir(exist_ok=True)
        
        self.templates = self._load_report_templates()
        self.formatting_rules = self._load_formatting_rules()
        
        logger.info("Consolidated Report Generator inicializado")
    
    def _load_report_templates(self) -> Dict[str, str]:
        """Carrega templates de relat√≥rios"""
        return {
            'executive_summary': """# Resumo Executivo - {title}

## Oportunidade Principal
{main_opportunity}

## Descobertas-Chave
{key_findings}

## Recomenda√ß√£o Estrat√©gica
{strategic_recommendation}

## Investimento Necess√°rio
{investment_required}

## ROI Projetado
{projected_roi}

## Pr√≥ximos Passos
{next_steps}
""",
            
            'technical_analysis': """# An√°lise T√©cnica Detalhada - {title}

## Avatar Ultra-Detalhado
{avatar_analysis}

## Posicionamento Estrat√©gico
{positioning_analysis}

## An√°lise Competitiva
{competition_analysis}

## Estrat√©gia de Marketing
{marketing_strategy}

## M√©tricas e KPIs
{metrics_analysis}

## Plano de A√ß√£o
{action_plan}
""",
            
            'implementation_guide': """# Guia de Implementa√ß√£o - {title}

## Fase 1: Prepara√ß√£o (0-30 dias)
{phase_1}

## Fase 2: Lan√ßamento (31-90 dias)
{phase_2}

## Fase 3: Crescimento (91-180 dias)
{phase_3}

## Recursos Necess√°rios
{resources_needed}

## Cronograma Detalhado
{detailed_timeline}

## M√©tricas de Acompanhamento
{tracking_metrics}
"""
        }
    
    def _load_formatting_rules(self) -> Dict[str, Any]:
        """Carrega regras de formata√ß√£o"""
        return {
            'remove_raw_data': True,
            'enhance_readability': True,
            'add_visual_elements': True,
            'include_actionable_items': True,
            'prioritize_insights': True,
            'add_implementation_notes': True
        }
    
    def generate_consolidated_reports(
        self, 
        analysis: Dict[str, Any], 
        session_id: str
    ) -> Dict[str, Any]:
        """Gera relat√≥rios consolidados completos"""
        
        logger.info(f"üìä Gerando relat√≥rios consolidados para sess√£o: {session_id}")
        
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            base_filename = f"analise_{session_id[:8]}_{timestamp}"
            
            generated_reports = {}
            
            # 1. Relat√≥rio Executivo Premium
            executive_report = self._generate_executive_report(analysis, base_filename)
            generated_reports['executive'] = executive_report
            
            # 2. An√°lise T√©cnica Completa
            technical_report = self._generate_technical_report(analysis, base_filename)
            generated_reports['technical'] = technical_report
            
            # 3. Guia de Implementa√ß√£o Detalhado
            implementation_guide = self._generate_implementation_guide(analysis, base_filename)
            generated_reports['implementation'] = implementation_guide
            
            # 4. Dashboard Interativo
            dashboard = self._generate_interactive_dashboard(analysis, base_filename)
            generated_reports['dashboard'] = dashboard
            
            # 5. Relat√≥rio de Insights Prioritizados
            insights_report = self._generate_insights_report(analysis, base_filename)
            generated_reports['insights'] = insights_report
            
            # 6. An√°lise de ROI e Proje√ß√µes
            roi_analysis = self._generate_roi_analysis(analysis, base_filename)
            generated_reports['roi'] = roi_analysis
            
            # 7. Plano de Conting√™ncia
            contingency_plan = self._generate_contingency_plan(analysis, base_filename)
            generated_reports['contingency'] = contingency_plan
            
            # 8. Relat√≥rio de Monitoramento
            monitoring_report = self._generate_monitoring_report(analysis, base_filename)
            generated_reports['monitoring'] = monitoring_report
            
            # Gera √≠ndice de relat√≥rios
            index_file = self._generate_reports_index(generated_reports, base_filename)
            generated_reports['index'] = index_file
            
            logger.info(f"‚úÖ {len(generated_reports)} relat√≥rios consolidados gerados")
            
            return {
                'success': True,
                'reports_generated': len(generated_reports),
                'reports': generated_reports,
                'base_directory': str(self.reports_dir),
                'session_id': session_id,
                'timestamp': timestamp
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rios consolidados: {e}")
            return {
                'success': False,
                'error': str(e),
                'session_id': session_id
            }
    
    def _generate_executive_report(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera relat√≥rio executivo premium"""
        
        try:
            resumo = analysis.get('resumo_executivo', {})
            projeto = analysis.get('projeto_dados', {})
            
            # Conte√∫do do relat√≥rio executivo
            content = f"""# Relat√≥rio Executivo Premium
## {projeto.get('segmento', 'An√°lise de Mercado')} - {datetime.now().strftime('%B %Y')}

### üéØ Oportunidade Principal
{resumo.get('visao_geral', {}).get('oportunidade_principal', 'Oportunidade estrat√©gica identificada')}

### üìä Potencial de Mercado
{resumo.get('visao_geral', {}).get('potencial_mercado', 'Potencial significativo identificado')}

### üöÄ Recomenda√ß√£o Estrat√©gica
{resumo.get('visao_geral', {}).get('recomendacao_estrategica', 'Estrat√©gia recomendada baseada na an√°lise')}

### üí∞ Investimento Recomendado
{resumo.get('investimento_recomendado', 'Investimento calculado baseado no ROI projetado')}

### üìà Proje√ß√µes Financeiras

#### Cen√°rio Conservador
- **Receita Mensal:** {self._extract_financial_projection(analysis, 'conservador', 'receita_mensal')}
- **Clientes/M√™s:** {self._extract_financial_projection(analysis, 'conservador', 'clientes_mes')}
- **Ticket M√©dio:** {self._extract_financial_projection(analysis, 'conservador', 'ticket_medio')}

#### Cen√°rio Realista
- **Receita Mensal:** {self._extract_financial_projection(analysis, 'realista', 'receita_mensal')}
- **Clientes/M√™s:** {self._extract_financial_projection(analysis, 'realista', 'clientes_mes')}
- **Ticket M√©dio:** {self._extract_financial_projection(analysis, 'realista', 'ticket_medio')}

#### Cen√°rio Otimista
- **Receita Mensal:** {self._extract_financial_projection(analysis, 'otimista', 'receita_mensal')}
- **Clientes/M√™s:** {self._extract_financial_projection(analysis, 'otimista', 'clientes_mes')}
- **Ticket M√©dio:** {self._extract_financial_projection(analysis, 'otimista', 'ticket_medio')}

### üéØ Pr√≥ximos Passos Cr√≠ticos
{self._format_list(resumo.get('proximos_passos_criticos', []))}

### ‚ö†Ô∏è Principais Riscos
{self._format_list(resumo.get('riscos_oportunidades', {}).get('principais_riscos', []))}

### üåü Maiores Oportunidades
{self._format_list(resumo.get('riscos_oportunidades', {}).get('maiores_oportunidades', []))}

### üìÖ Timeline de Implementa√ß√£o
{self._format_timeline(resumo.get('timeline_implementacao', {}))}

---
*Relat√≥rio gerado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')} pelo ARQV30 Enhanced v2.0*
"""
            
            # Salva relat√≥rio
            filepath = self.reports_dir / f"{base_filename}_executivo.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Gera vers√£o HTML
            html_content = markdown.markdown(content, extensions=['tables', 'toc'])
            html_filepath = self.reports_dir / f"{base_filename}_executivo.html"
            
            with open(html_filepath, 'w', encoding='utf-8') as f:
                f.write(self._wrap_html(html_content, "Relat√≥rio Executivo Premium"))
            
            logger.info(f"‚úÖ Relat√≥rio executivo gerado: {filepath}")
            
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio executivo: {e}")
            return ""
    
    def _generate_technical_report(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera relat√≥rio t√©cnico detalhado"""
        
        try:
            avatar = analysis.get('avatar_ultra_detalhado', {})
            posicionamento = analysis.get('posicionamento_estrategico', {})
            
            content = f"""# An√°lise T√©cnica Detalhada
## {analysis.get('projeto_dados', {}).get('segmento', 'Mercado Analisado')}

### üë§ Avatar Ultra-Detalhado

#### Perfil Demogr√°fico
{self._format_dict(avatar.get('perfil_demografico', {}))}

#### Perfil Psicogr√°fico
{self._format_dict(avatar.get('perfil_psicografico', {}))}

#### Dores Viscerais ({len(avatar.get('dores_viscerais', []))})
{self._format_numbered_list(avatar.get('dores_viscerais', []))}

#### Desejos Secretos ({len(avatar.get('desejos_secretos', []))})
{self._format_numbered_list(avatar.get('desejos_secretos', []))}

#### Obje√ß√µes Reais ({len(avatar.get('objecoes_reais', []))})
{self._format_numbered_list(avatar.get('objecoes_reais', []))}

### üéØ Posicionamento Estrat√©gico

#### Proposta de Valor √önica
{posicionamento.get('proposta_valor_unica', 'Proposta de valor a ser definida')}

#### Diferenciais Competitivos
{self._format_list(posicionamento.get('diferenciais_competitivos', []))}

#### Mensagem Central
{posicionamento.get('mensagem_central', 'Mensagem central a ser definida')}

#### Estrat√©gia Oceano Azul
{posicionamento.get('estrategia_oceano_azul', 'Estrat√©gia de oceano azul a ser desenvolvida')}

### üèÜ An√°lise Competitiva
{self._format_competition_analysis(analysis.get('analise_concorrencia_avancada', []))}

### üìà Estrat√©gia de Marketing Completa
{self._format_marketing_strategy(analysis.get('estrategia_marketing_completa', {}))}

### üìä M√©tricas e KPIs Avan√ßados
{self._format_metrics_analysis(analysis.get('metricas_kpis_avancados', {}))}

### üîÑ Funil de Vendas Detalhado
{self._format_sales_funnel(analysis.get('funil_vendas_detalhado', {}))}

---
*An√°lise t√©cnica gerada em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            
            filepath = self.reports_dir / f"{base_filename}_tecnico.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ Relat√≥rio t√©cnico gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio t√©cnico: {e}")
            return ""
    
    def _generate_implementation_guide(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera guia de implementa√ß√£o detalhado"""
        
        try:
            plano = analysis.get('plano_acao_detalhado', {})
            
            content = f"""# Guia de Implementa√ß√£o Detalhado
## {analysis.get('projeto_dados', {}).get('segmento', 'Projeto')}

### üöÄ Vis√£o Geral da Implementa√ß√£o

Este guia fornece um roadmap detalhado para implementar as estrat√©gias identificadas na an√°lise de mercado.

### üìÖ Fase 1: Primeiros 30 Dias - Prepara√ß√£o e Estrutura√ß√£o

#### Foco Principal
{plano.get('primeiros_30_dias', {}).get('foco', 'Estrutura√ß√£o inicial do projeto')}

#### Atividades Detalhadas
{self._format_activities(plano.get('primeiros_30_dias', {}).get('atividades', []))}

#### Investimento Necess√°rio
{plano.get('primeiros_30_dias', {}).get('investimento', 'Investimento a ser calculado')}

#### Entregas Esperadas
{self._format_list(plano.get('primeiros_30_dias', {}).get('entregas', []))}

#### M√©tricas de Acompanhamento
{self._format_list(plano.get('primeiros_30_dias', {}).get('metricas', []))}

### üìà Fase 2: Dias 31-90 - Implementa√ß√£o e Testes

#### Foco Principal
{plano.get('dias_31_90', {}).get('foco', 'Implementa√ß√£o das estrat√©gias principais')}

#### Atividades Detalhadas
{self._format_activities(plano.get('dias_31_90', {}).get('atividades', []))}

#### Estrat√©gias de Escala√ß√£o
{self._format_list(plano.get('dias_31_90', {}).get('escalacao', []))}

#### Otimiza√ß√µes Planejadas
{self._format_list(plano.get('dias_31_90', {}).get('otimizacao', []))}

### üéØ Fase 3: Dias 91-180 - Otimiza√ß√£o e Crescimento

#### Foco Principal
{plano.get('dias_91_180', {}).get('foco', 'Otimiza√ß√£o e crescimento sustent√°vel')}

#### Estrat√©gias de Consolida√ß√£o
{self._format_list(plano.get('dias_91_180', {}).get('consolidacao', []))}

#### Inova√ß√µes a Implementar
{self._format_list(plano.get('dias_91_180', {}).get('inovacao', []))}

#### Parcerias Estrat√©gicas
{self._format_list(plano.get('dias_91_180', {}).get('parcerias', []))}

### üõ†Ô∏è Recursos e Ferramentas Necess√°rias

#### Recursos Humanos
- Equipe de marketing digital
- Especialista em vendas
- Analista de dados
- Designer/Desenvolvedor

#### Recursos Tecnol√≥gicos
- CRM avan√ßado
- Ferramentas de automa√ß√£o
- Plataforma de analytics
- Sistema de gest√£o de conte√∫do

#### Recursos Financeiros
- Or√ßamento de marketing
- Investimento em tecnologia
- Capital de giro
- Reserva para conting√™ncias

### üìä Sistema de Monitoramento

#### KPIs Principais
{self._format_kpis(analysis.get('metricas_kpis_avancados', {}))}

#### Frequ√™ncia de Acompanhamento
- **Di√°rio:** M√©tricas operacionais
- **Semanal:** KPIs de performance
- **Mensal:** An√°lise estrat√©gica
- **Trimestral:** Revis√£o completa

### ‚ö†Ô∏è Planos de Conting√™ncia

#### Cen√°rio de Baixa Performance
- Revis√£o de estrat√©gias
- Ajuste de investimentos
- Mudan√ßa de canais
- Otimiza√ß√£o de processos

#### Cen√°rio de Alta Performance
- Acelera√ß√£o de investimentos
- Expans√£o de canais
- Contrata√ß√£o de equipe
- Desenvolvimento de novos produtos

---
*Guia de implementa√ß√£o gerado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            
            filepath = self.reports_dir / f"{base_filename}_implementacao.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ Guia de implementa√ß√£o gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar guia de implementa√ß√£o: {e}")
            return ""
    
    def _generate_interactive_dashboard(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera dashboard interativo em HTML"""
        
        try:
            metricas = analysis.get('metricas_kpis_avancados', {})
            insights = analysis.get('insights_exclusivos', [])
            
            html_content = f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard Interativo - ARQV30</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .metrics-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            padding: 30px;
        }}
        .metric-card {{
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            border-left: 4px solid #4facfe;
            transition: transform 0.3s ease;
        }}
        .metric-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }}
        .metric-value {{
            font-size: 2em;
            font-weight: bold;
            color: #4facfe;
            margin: 10px 0;
        }}
        .metric-label {{
            color: #666;
            font-size: 0.9em;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        .insights-section {{
            padding: 30px;
            background: #f8f9fa;
        }}
        .insight-item {{
            background: white;
            margin: 10px 0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #28a745;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .priority-high {{ border-left-color: #dc3545; }}
        .priority-medium {{ border-left-color: #ffc107; }}
        .priority-low {{ border-left-color: #28a745; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Dashboard Interativo</h1>
            <p>An√°lise Ultra-Avan√ßada de Mercado</p>
            <p><strong>{analysis.get('projeto_dados', {}).get('segmento', 'Mercado Analisado')}</strong></p>
        </div>
        
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-label">ROI Esperado</div>
                <div class="metric-value">{metricas.get('roi_esperado', 'N/A')}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Fontes Analisadas</div>
                <div class="metric-value">{analysis.get('metadata', {}).get('research_sources', 0)}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Insights Gerados</div>
                <div class="metric-value">{len(insights)}</div>
            </div>
            <div class="metric-card">
                <div class="metric-label">Score de Qualidade</div>
                <div class="metric-value">{analysis.get('metadata', {}).get('quality_score', 0):.1f}%</div>
            </div>
        </div>
        
        <div class="insights-section">
            <h2>üí° Insights Prioritizados</h2>
            {self._format_insights_html(insights)}
        </div>
    </div>
    
    <script>
        // Adiciona interatividade
        document.querySelectorAll('.metric-card').forEach(card => {{
            card.addEventListener('click', function() {{
                this.style.background = '#e3f2fd';
                setTimeout(() => {{
                    this.style.background = '#f8f9fa';
                }}, 200);
            }});
        }});
    </script>
</body>
</html>"""
            
            filepath = self.reports_dir / f"{base_filename}_dashboard.html"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            logger.info(f"‚úÖ Dashboard interativo gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar dashboard: {e}")
            return ""
    
    def _generate_insights_report(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera relat√≥rio de insights prioritizados"""
        
        try:
            insights = analysis.get('insights_exclusivos', [])
            
            content = f"""# Relat√≥rio de Insights Prioritizados
## {analysis.get('projeto_dados', {}).get('segmento', 'Mercado Analisado')}

### üìä Resumo dos Insights
- **Total de Insights:** {len(insights)}
- **Gerado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
- **Qualidade:** Premium (dados reais validados)

### üí° Insights Detalhados

"""
            
            for i, insight in enumerate(insights, 1):
                # Categoriza insight
                categoria = self._categorize_insight_advanced(insight)
                prioridade = self._calculate_insight_priority_advanced(insight)
                
                content += f"""#### Insight #{i} - {categoria}
**Prioridade:** {prioridade}
**Conte√∫do:** {insight}
**Acionabilidade:** {self._assess_actionability_advanced(insight)}
**Impacto Estimado:** {self._estimate_impact_advanced(insight)}

---

"""
            
            filepath = self.reports_dir / f"{base_filename}_insights.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ Relat√≥rio de insights gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio de insights: {e}")
            return ""
    
    def _generate_roi_analysis(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera an√°lise detalhada de ROI"""
        
        try:
            metricas = analysis.get('metricas_kpis_avancados', {})
            projecoes = metricas.get('projecoes_financeiras', {})
            
            content = f"""# An√°lise de ROI e Proje√ß√µes Financeiras

## üí∞ Proje√ß√µes Financeiras Detalhadas

### Cen√°rio Conservador
{self._format_financial_scenario(projecoes.get('cenario_conservador', {}))}

### Cen√°rio Realista
{self._format_financial_scenario(projecoes.get('cenario_realista', {}))}

### Cen√°rio Otimista
{self._format_financial_scenario(projecoes.get('cenario_otimista', {}))}

## üìà An√°lise de Retorno sobre Investimento

### ROI Esperado
{metricas.get('roi_esperado', 'ROI a ser calculado baseado nas proje√ß√µes')}

### M√©tricas Operacionais
{self._format_operational_metrics(metricas.get('metricas_operacionais', {}))}

### Payback Period
{self._calculate_payback_period(projecoes)}

### Break-even Analysis
{self._calculate_breakeven(projecoes)}

## üéØ Recomenda√ß√µes de Investimento

### Aloca√ß√£o de Recursos Recomendada
- **Marketing Digital:** 40-50% do or√ßamento
- **Desenvolvimento de Produto:** 20-30%
- **Vendas e Relacionamento:** 15-25%
- **Opera√ß√µes e Suporte:** 10-15%

### Cronograma de Investimentos
{self._format_investment_timeline(analysis)}

---
*An√°lise de ROI gerada em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            
            filepath = self.reports_dir / f"{base_filename}_roi.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ An√°lise de ROI gerada: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar an√°lise de ROI: {e}")
            return ""
    
    def _generate_contingency_plan(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera plano de conting√™ncia"""
        
        try:
            content = f"""# Plano de Conting√™ncia
## {analysis.get('projeto_dados', {}).get('segmento', 'Projeto')}

### üö® Cen√°rios de Risco e Respostas

#### Cen√°rio 1: Performance Abaixo do Esperado
**Indicadores:**
- Convers√£o < 50% da meta
- CAC > 150% do planejado
- Churn > 10% mensal

**A√ß√µes Imediatas:**
- Revis√£o completa do funil de vendas
- Otimiza√ß√£o de campanhas de marketing
- An√°lise detalhada do produto/servi√ßo
- Pesquisa com clientes perdidos

#### Cen√°rio 2: Concorr√™ncia Agressiva
**Indicadores:**
- Perda de market share
- Press√£o de pre√ßos
- Clientes migrando para concorrentes

**A√ß√µes Imediatas:**
- An√°lise competitiva atualizada
- Desenvolvimento de diferenciais √∫nicos
- Estrat√©gia de reten√ß√£o de clientes
- Inova√ß√£o acelerada

#### Cen√°rio 3: Mudan√ßas Regulat√≥rias
**Indicadores:**
- Novas leis ou regulamenta√ß√µes
- Mudan√ßas nas regras do setor
- Compliance adicional necess√°rio

**A√ß√µes Imediatas:**
- Adequa√ß√£o legal imediata
- Revis√£o de processos
- Treinamento de equipe
- Comunica√ß√£o com clientes

### üõ°Ô∏è Estrat√©gias de Mitiga√ß√£o

#### Diversifica√ß√£o de Riscos
- M√∫ltiplos canais de aquisi√ß√£o
- Diversifica√ß√£o de produtos/servi√ßos
- Diferentes segmentos de clientes
- Parcerias estrat√©gicas

#### Monitoramento Cont√≠nuo
- Alertas autom√°ticos de performance
- An√°lise semanal de m√©tricas
- Feedback cont√≠nuo de clientes
- Monitoramento da concorr√™ncia

---
*Plano de conting√™ncia gerado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            
            filepath = self.reports_dir / f"{base_filename}_contingencia.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ Plano de conting√™ncia gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar plano de conting√™ncia: {e}")
            return ""
    
    def _generate_monitoring_report(self, analysis: Dict[str, Any], base_filename: str) -> str:
        """Gera relat√≥rio de monitoramento"""
        
        try:
            content = f"""# Sistema de Monitoramento e Controle

## üìä Dashboard de M√©tricas

### KPIs Principais
{self._format_main_kpis(analysis)}

### M√©tricas Operacionais
{self._format_operational_kpis(analysis)}

### M√©tricas Financeiras
{self._format_financial_kpis(analysis)}

## üîç Alertas e Indicadores

### Alertas Cr√≠ticos (A√ß√£o Imediata)
- Convers√£o < 50% da meta
- CAC > 200% do planejado
- Churn > 15% mensal
- NPS < 30

### Alertas de Aten√ß√£o (Monitoramento)
- Convers√£o entre 50-80% da meta
- CAC entre 120-200% do planejado
- Churn entre 8-15% mensal
- NPS entre 30-50

### Indicadores Positivos
- Convers√£o > 100% da meta
- CAC < 80% do planejado
- Churn < 5% mensal
- NPS > 70

## üìà Relat√≥rios Autom√°ticos

### Relat√≥rio Di√°rio
- Vendas do dia
- Leads gerados
- Convers√µes
- Principais m√©tricas

### Relat√≥rio Semanal
- Performance vs metas
- An√°lise de tend√™ncias
- Top performers
- √Åreas de melhoria

### Relat√≥rio Mensal
- An√°lise completa de performance
- ROI atualizado
- Proje√ß√µes revisadas
- Recomenda√ß√µes estrat√©gicas

---
*Sistema de monitoramento configurado em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}*
"""
            
            filepath = self.reports_dir / f"{base_filename}_monitoramento.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ Relat√≥rio de monitoramento gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar relat√≥rio de monitoramento: {e}")
            return ""
    
    def _generate_reports_index(self, reports: Dict[str, str], base_filename: str) -> str:
        """Gera √≠ndice de todos os relat√≥rios"""
        
        try:
            content = f"""# √çndice de Relat√≥rios - ARQV30 Enhanced v2.0

## üìã Relat√≥rios Dispon√≠veis

### 1. Relat√≥rio Executivo Premium
**Arquivo:** `{os.path.basename(reports.get('executive', ''))}`
**Descri√ß√£o:** Resumo executivo com descobertas-chave e recomenda√ß√µes estrat√©gicas
**P√∫blico:** C-Level, Investidores, Tomadores de Decis√£o

### 2. An√°lise T√©cnica Detalhada
**Arquivo:** `{os.path.basename(reports.get('technical', ''))}`
**Descri√ß√£o:** An√°lise t√©cnica completa com avatar, posicionamento e estrat√©gias
**P√∫blico:** Gerentes, Analistas, Equipe de Marketing

### 3. Guia de Implementa√ß√£o
**Arquivo:** `{os.path.basename(reports.get('implementation', ''))}`
**Descri√ß√£o:** Roadmap detalhado de implementa√ß√£o com cronograma e recursos
**P√∫blico:** Equipe de Projeto, Gerentes de Implementa√ß√£o

### 4. Dashboard Interativo
**Arquivo:** `{os.path.basename(reports.get('dashboard', ''))}`
**Descri√ß√£o:** Dashboard visual interativo com m√©tricas e insights
**P√∫blico:** Todos os stakeholders

### 5. Relat√≥rio de Insights
**Arquivo:** `{os.path.basename(reports.get('insights', ''))}`
**Descri√ß√£o:** Insights prioritizados com an√°lise de impacto e acionabilidade
**P√∫blico:** Estrategistas, Analistas de Mercado

### 6. An√°lise de ROI
**Arquivo:** `{os.path.basename(reports.get('roi', ''))}`
**Descri√ß√£o:** Proje√ß√µes financeiras detalhadas e an√°lise de retorno
**P√∫blico:** CFO, Controladores, Investidores

### 7. Plano de Conting√™ncia
**Arquivo:** `{os.path.basename(reports.get('contingency', ''))}`
**Descri√ß√£o:** Cen√°rios de risco e planos de resposta
**P√∫blico:** Ger√™ncia, Equipe de Risco

### 8. Sistema de Monitoramento
**Arquivo:** `{os.path.basename(reports.get('monitoring', ''))}`
**Descri√ß√£o:** KPIs, alertas e sistema de acompanhamento
**P√∫blico:** Analistas, Gerentes Operacionais

## üìä Metadados da An√°lise

- **Gerado em:** {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
- **Engine:** ARQV30 Enhanced v2.0
- **IA Utilizada:** {analysis.get('metadata', {}).get('ai_provider_used', 'N/A')}
- **Modelo:** {analysis.get('metadata', {}).get('model_used', 'N/A')}
- **Qualidade:** {analysis.get('metadata', {}).get('quality_score', 0):.1f}%
- **Fontes:** {analysis.get('metadata', {}).get('research_sources', 0)}
- **Tempo de Processamento:** {analysis.get('metadata', {}).get('processing_time_formatted', 'N/A')}

## üéØ Como Usar os Relat√≥rios

1. **Comece pelo Relat√≥rio Executivo** para ter uma vis√£o geral
2. **Use a An√°lise T√©cnica** para entender detalhes espec√≠ficos
3. **Siga o Guia de Implementa√ß√£o** para executar as estrat√©gias
4. **Monitore com o Dashboard** para acompanhar progresso
5. **Consulte os Insights** para decis√µes estrat√©gicas
6. **Use a An√°lise de ROI** para justificar investimentos
7. **Tenha o Plano de Conting√™ncia** sempre √† m√£o
8. **Configure o Monitoramento** desde o in√≠cio

---
*√çndice gerado automaticamente pelo ARQV30 Enhanced v2.0*
"""
            
            filepath = self.reports_dir / f"{base_filename}_indice.md"
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ √çndice de relat√≥rios gerado: {filepath}")
            return str(filepath)
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar √≠ndice: {e}")
            return ""
    
    # M√©todos auxiliares de formata√ß√£o
    def _format_list(self, items: List[str]) -> str:
        """Formata lista como markdown"""
        if not items:
            return "- Nenhum item dispon√≠vel"
        return '\n'.join(f"- {item}" for item in items)
    
    def _format_numbered_list(self, items: List[str]) -> str:
        """Formata lista numerada"""
        if not items:
            return "1. Nenhum item dispon√≠vel"
        return '\n'.join(f"{i}. {item}" for i, item in enumerate(items, 1))
    
    def _format_dict(self, data: Dict[str, Any]) -> str:
        """Formata dicion√°rio como markdown"""
        if not data:
            return "- Dados n√£o dispon√≠veis"
        
        formatted = []
        for key, value in data.items():
            label = key.replace('_', ' ').title()
            formatted.append(f"- **{label}:** {value}")
        
        return '\n'.join(formatted)
    
    def _format_activities(self, activities: List[str]) -> str:
        """Formata atividades com checkboxes"""
        if not activities:
            return "- [ ] Nenhuma atividade definida"
        return '\n'.join(f"- [ ] {activity}" for activity in activities)
    
    def _format_timeline(self, timeline: Dict[str, str]) -> str:
        """Formata timeline"""
        if not timeline:
            return "Timeline a ser definido"
        
        formatted = []
        for fase, descricao in timeline.items():
            formatted.append(f"**{fase}:** {descricao}")
        
        return '\n'.join(formatted)
    
    def _extract_financial_projection(self, analysis: Dict[str, Any], scenario: str, metric: str) -> str:
        """Extrai proje√ß√£o financeira espec√≠fica"""
        try:
            metricas = analysis.get('metricas_kpis_avancados', {})
            projecoes = metricas.get('projecoes_financeiras', {})
            cenario = projecoes.get(f'cenario_{scenario}', {})
            return cenario.get(metric, 'N/A')
        except:
            return 'N/A'
    
    def _categorize_insight_advanced(self, insight: str) -> str:
        """Categoriza insight de forma avan√ßada"""
        insight_lower = insight.lower()
        
        if any(word in insight_lower for word in ['oportunidade', 'potencial', 'crescimento', 'expans√£o']):
            return 'üöÄ Oportunidade'
        elif any(word in insight_lower for word in ['risco', 'amea√ßa', 'desafio', 'problema']):
            return '‚ö†Ô∏è Risco'
        elif any(word in insight_lower for word in ['tend√™ncia', 'futuro', 'evolu√ß√£o', 'mudan√ßa']):
            return 'üìà Tend√™ncia'
        elif any(word in insight_lower for word in ['estrat√©gia', 't√°tica', 'abordagem', 'm√©todo']):
            return 'üéØ Estrat√©gia'
        elif any(word in insight_lower for word in ['tecnologia', 'inova√ß√£o', 'digital', 'automa√ß√£o']):
            return 'üí° Inova√ß√£o'
        else:
            return 'üìä Mercado'
    
    def _calculate_insight_priority_advanced(self, insight: str) -> str:
        """Calcula prioridade avan√ßada do insight"""
        insight_lower = insight.lower()
        
        high_priority = ['cr√≠tico', 'urgente', 'imediato', 'essencial', 'fundamental']
        medium_priority = ['importante', 'relevante', 'significativo', 'necess√°rio']
        
        if any(word in insight_lower for word in high_priority):
            return 'üî¥ Alta'
        elif any(word in insight_lower for word in medium_priority):
            return 'üü° M√©dia'
        else:
            return 'üü¢ Baixa'
    
    def _assess_actionability_advanced(self, insight: str) -> str:
        """Avalia acionabilidade do insight"""
        if len(insight) > 100 and any(word in insight.lower() for word in ['implementar', 'executar', 'desenvolver', 'criar']):
            return 'Alta - Insight espec√≠fico e acion√°vel'
        elif len(insight) > 50:
            return 'M√©dia - Requer planejamento adicional'
        else:
            return 'Baixa - Muito gen√©rico'
    
    def _estimate_impact_advanced(self, insight: str) -> str:
        """Estima impacto do insight"""
        insight_lower = insight.lower()
        
        if any(word in insight_lower for word in ['receita', 'lucro', 'vendas', 'crescimento']):
            return 'Alto - Impacto direto na receita'
        elif any(word in insight_lower for word in ['efici√™ncia', 'otimiza√ß√£o', 'melhoria']):
            return 'M√©dio - Melhoria operacional'
        else:
            return 'Baixo - Impacto indireto'
    
    def _wrap_html(self, content: str, title: str) -> str:
        """Envolve conte√∫do em HTML completo"""
        return f"""<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - ARQV30</title>
    <style>
        body {{ font-family: 'Segoe UI', sans-serif; line-height: 1.6; margin: 40px; }}
        h1, h2, h3 {{ color: #2c3e50; }}
        .container {{ max-width: 1000px; margin: 0 auto; }}
        table {{ border-collapse: collapse; width: 100%; }}
        th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
        th {{ background-color: #f2f2f2; }}
    </style>
</head>
<body>
    <div class="container">
        {content}
    </div>
</body>
</html>"""

# Inst√¢ncia global
consolidated_report_generator = ConsolidatedReportGenerator()