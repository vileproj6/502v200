#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Gemini 2.5 Pro Client
Cliente otimizado para Gemini 2.5 Pro com configura√ß√µes avan√ßadas
"""

import os
import logging
import json
import time
from typing import Dict, List, Optional, Any
from datetime import datetime

try:
    import google.generativeai as genai
    HAS_GEMINI = True
except ImportError:
    HAS_GEMINI = False

logger = logging.getLogger(__name__)

class Gemini25ProClient:
    """Cliente otimizado para Gemini 2.5 Pro"""
    
    def __init__(self):
        """Inicializa cliente Gemini 2.5 Pro"""
        self.api_key = os.getenv('GEMINI_API_KEY')
        
        if not self.api_key:
            logger.error("‚ùå GEMINI_API_KEY n√£o configurada")
            self.available = False
            return
        
        if not HAS_GEMINI:
            logger.error("‚ùå Biblioteca google-generativeai n√£o instalada")
            self.available = False
            return
        
        try:
            # Configura API
            genai.configure(api_key=self.api_key)
            
            # Modelo mais avan√ßado dispon√≠vel
            self.model = genai.GenerativeModel("gemini-2.0-flash-exp")
            
            # Configura√ß√µes otimizadas para an√°lises ultra-detalhadas
            self.generation_config = {
                'temperature': 0.9,  # M√°xima criatividade
                'top_p': 0.95,
                'top_k': 64,
                'max_output_tokens': 8192,  # M√°ximo permitido
                'candidate_count': 1,
                'response_mime_type': 'text/plain'
            }
            
            # Configura√ß√µes de seguran√ßa m√≠nimas
            self.safety_settings = [
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_NONE"
                }
            ]
            
            self.available = True
            self.stats = {
                'total_requests': 0,
                'successful_requests': 0,
                'failed_requests': 0,
                'total_tokens_used': 0,
                'avg_response_time': 0.0
            }
            
            logger.info("‚úÖ Gemini 2.5 Pro Client inicializado com configura√ß√µes avan√ßadas")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Gemini 2.5 Pro: {e}")
            self.available = False
    
    def is_available(self) -> bool:
        """Verifica se o cliente est√° dispon√≠vel"""
        return self.available
    
    def generate_ultra_analysis(
        self, 
        prompt: str, 
        max_tokens: int = 8192,
        temperature: float = 0.9,
        context: Dict[str, Any] = None
    ) -> Optional[str]:
        """Gera an√°lise ultra-detalhada com Gemini 2.5 Pro"""
        
        if not self.available:
            raise Exception("Gemini 2.5 Pro n√£o est√° dispon√≠vel")
        
        self.stats['total_requests'] += 1
        start_time = time.time()
        
        try:
            # Configura√ß√£o personalizada para esta requisi√ß√£o
            custom_config = self.generation_config.copy()
            custom_config['temperature'] = temperature
            custom_config['max_output_tokens'] = min(max_tokens, 8192)
            
            # Adiciona contexto ao prompt se fornecido
            if context:
                enhanced_prompt = self._enhance_prompt_with_context(prompt, context)
            else:
                enhanced_prompt = prompt
            
            logger.info("üöÄ Gerando an√°lise ultra-detalhada com Gemini 2.5 Pro...")
            
            # Gera conte√∫do
            response = self.model.generate_content(
                enhanced_prompt,
                generation_config=custom_config,
                safety_settings=self.safety_settings
            )
            
            response_time = time.time() - start_time
            
            if response.text:
                # Atualiza estat√≠sticas
                self.stats['successful_requests'] += 1
                self.stats['avg_response_time'] = (
                    (self.stats['avg_response_time'] * (self.stats['successful_requests'] - 1) + response_time) 
                    / self.stats['successful_requests']
                )
                
                # Estima tokens usados (aproxima√ß√£o)
                estimated_tokens = len(enhanced_prompt.split()) + len(response.text.split())
                self.stats['total_tokens_used'] += estimated_tokens
                
                logger.info(f"‚úÖ Gemini 2.5 Pro: {len(response.text)} chars em {response_time:.2f}s")
                
                return response.text
            else:
                raise Exception("Resposta vazia do Gemini 2.5 Pro")
                
        except Exception as e:
            self.stats['failed_requests'] += 1
            response_time = time.time() - start_time
            
            logger.error(f"‚ùå Erro no Gemini 2.5 Pro ap√≥s {response_time:.2f}s: {e}")
            raise Exception(f"Gemini 2.5 Pro falhou: {str(e)}")
    
    def _enhance_prompt_with_context(self, prompt: str, context: Dict[str, Any]) -> str:
        """Aprimora prompt com contexto adicional"""
        
        enhanced = f"""CONTEXTO ADICIONAL:
- An√°lise solicitada em: {datetime.now().strftime('%d/%m/%Y %H:%M')}
- N√≠vel de detalhamento: ULTRA-AVAN√áADO
- Qualidade esperada: CONSULTORIA PREMIUM
- P√∫blico-alvo: {context.get('publico', 'Profissionais')}
- Segmento: {context.get('segmento', 'Neg√≥cios')}

{prompt}

INSTRU√á√ïES ADICIONAIS:
- Use dados espec√≠ficos e mensur√°veis
- Evite generalidades e clich√™s
- Foque em insights acion√°veis
- Mantenha tom profissional e autoritativo
- Estruture informa√ß√µes de forma clara e l√≥gica"""
        
        return enhanced
    
    def test_connection(self) -> bool:
        """Testa conex√£o com Gemini 2.5 Pro"""
        
        if not self.available:
            return False
        
        try:
            test_prompt = "Responda apenas: GEMINI_2_5_PRO_OK"
            response = self.generate_ultra_analysis(test_prompt, max_tokens=50)
            
            return response and "GEMINI_2_5_PRO_OK" in response
            
        except Exception as e:
            logger.error(f"‚ùå Teste de conex√£o falhou: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas do cliente"""
        
        success_rate = 0.0
        if self.stats['total_requests'] > 0:
            success_rate = (self.stats['successful_requests'] / self.stats['total_requests']) * 100
        
        return {
            **self.stats,
            'success_rate': success_rate,
            'available': self.available,
            'model': "gemini-2.0-flash-exp",
            'last_updated': datetime.now().isoformat()
        }
    
    def reset_stats(self):
        """Reset estat√≠sticas"""
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'total_tokens_used': 0,
            'avg_response_time': 0.0
        }
        logger.info("üîÑ Estat√≠sticas do Gemini 2.5 Pro resetadas")
    
    def analyze_market_comprehensive(self, market_data: Dict[str, Any]) -> Optional[str]:
        """An√°lise de mercado abrangente espec√≠fica"""
        
        prompt = f"""Como especialista em an√°lise de mercado de elite, analise o seguinte mercado brasileiro:

DADOS DO MERCADO:
- Segmento: {market_data.get('segmento', 'N/A')}
- Produto/Servi√ßo: {market_data.get('produto', 'N/A')}
- P√∫blico-Alvo: {market_data.get('publico', 'N/A')}
- Pre√ßo: R$ {market_data.get('preco', 'N/A')}
- Objetivo de Receita: R$ {market_data.get('objetivo_receita', 'N/A')}

FORNE√áA:
1. An√°lise SWOT ultra-detalhada
2. Oportunidades ocultas espec√≠ficas
3. Amea√ßas n√£o √≥bvias
4. Estrat√©gias de diferencia√ß√£o inovadoras
5. Proje√ß√µes financeiras realistas
6. Roadmap de implementa√ß√£o detalhado
7. KPIs cr√≠ticos para monitoramento
8. Cen√°rios futuros prov√°veis

Seja ultra-espec√≠fico para o mercado brasileiro. Cada insight deve ser imediatamente acion√°vel."""
        
        return self.generate_ultra_analysis(prompt, max_tokens=8192, context=market_data)

# Inst√¢ncia global
gemini_25_client = Gemini25ProClient()